import {
    compare
} from "bcrypt";
import User from "../models/UserModel.js";
import jwt from "jsonwebtoken";

import {
    renameSync,
    unlinkSync
} from "fs"
const maxAge = 3 * 24 * 60 * 60 * 1000;

//creates a token using user email and userid
const createToken = (email, userId) => {
    return jwt.sign({
        email,
        userId,
    }, process.env.JWT_KEY, {
        expiresIn: maxAge
    })
}

export const signUp = async (req, res, next) => {
    try {
        const {
            email,
            password
        } = req.body;
        if (!email || !password) {
            return res.status(400).send("Email and Password is required")
        }
        const user = await User.create({
            email,
            password
        })
        //creates a cookie named "jwt" that contains the jwt generated by the createToken function , sent with every request to the server, allowing for authenticated requests.
        res.cookie("jwt", createToken(email, user.id), {
            maxAge,
            secure: true,
            sameSite: "None"
        })

        return res.status(201).json({
            user: {
                id: user.id,
                email: user.email,
                profileSetup: user.profilesetup
            }
        })
    } catch (error) {
        console.log(error)
        return res.status(500).send("Internal Server Error")
    }
}

export const login = async (req, res, next) => {
    try {
        const {
            email,
            password
        } = req.body;
        if (!email || !password) {
            return res.status(400).send("Email and Password is required")
        }
        const user = await User.findOne({
            email
        })
        if (!user) {
            return res.status(404).send("User with the given email not found")
        }
        const auth = compare(password, user.password)
        if (!auth) {
            return res.status(400).send("Password is incorrect")
        }
        //creates a cookie named "jwt" that contains the jwt generated by the createToken function , sent with every request to the server, allowing for authenticated requests.
        res.cookie("jwt", createToken(email, user.id), {
            maxAge,
            secure: true,
            sameSite: "None"
        })

        return res.status(200).json({
            user: {
                id: user.id,
                email: user.email,
                profileSetup: user.profilesetup,
                firstName: user.firstName,
                lastName: user.lastName,
                image: user.image,
                color: user.color,
            }
        })
    } catch (error) {
        console.log(error)
        return res.status(500).send("Internal Server Error")
    }
}

export const getUserInfo = async (req, res, next) => {
    try {
        const userData = await User.findById(req.userId);
        if (!userData) {
            return res.status(404).send("User with the given id not found")
        }

        return res.status(200).json({

            id: userData.id,
            email: userData.email,
            profileSetup: userData.profilesetup,
            firstName: userData.firstName,
            lastName: userData.lastName,
            image: userData.image,
            color: userData.color,

        })
    } catch (error) {
        console.log(error)
        return res.status(500).send("Internal Server Error")
    }
}
export const updateProfile = async (req, res, next) => {
    try {
        const {
            userId
        } = req;
        const {
            firstName,
            lastName,
            color
        } = req.body
        if (!firstName || !lastName || !color) {
            return res.status(400).send("First Name , Last Name and Color is Required")
        }

        const userData = await User.findByIdAndUpdate(userId, {
            firstName,
            lastName,
            color,
            profileSetup: true
        }, {
            new: true,
            runValidators: true
        })

        return res.status(200).json({

            id: userData.id,
            email: userData.email,
            profileSetup: userData.profileSetup,
            firstName: userData.firstName,
            lastName: userData.lastName,
            image: userData.image,
            color: userData.color,

        })


    } catch (error) {
        console.log(error)
        return res.status(500).send("Internal Server Error")
    }
}

export const addProfileImage = async (req, res, next) => {
    try {

        if (!req.file) {
            return res.status(400).send("File is required")
        }
        const date = Date.now();
        let fileName = "uploads/profiles/" + date + req.file.originalname
        renameSync(req.file.path, fileName)

        const updatedUser = await User.findByIdAndUpdate(req.userId, {
            image: fileName
        }, {
            new: true,
            runValidators: true
        })
        return res.status(200).json({


            image: updatedUser.image,


        })


    } catch (error) {
        console.log(error)
        return res.status(500).send("Internal Server Error")
    }
}

export const removeProfileImage = async (req, res, next) => {
    try {
        const {
            userId
        } = req;

        const user = await User.findById(userId)
        if (!user) {
            return res.status(404).send("User Not Found")
        }
        if (user.image) {
            unlinkSync(user.image)
        }
        user.image = null;
        await user.save()

        return res.status(200).send("Profile Image Removed Successfully")

    } catch (error) {
        console.log(error)
        return res.status(500).send("Internal Server Error")
    }
}